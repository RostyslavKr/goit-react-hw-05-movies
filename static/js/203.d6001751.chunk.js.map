{"version":3,"file":"static/js/203.d6001751.chunk.js","mappings":"2OAMMA,EAAO,SAAC,GAAY,IAAVC,EAAS,EAATA,GACd,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAoCF,EAAAA,EAAAA,WAAS,GAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KAUA,OATAC,EAAAA,EAAAA,YAAU,WACJF,GCVuB,SAAAJ,GAC7B,OAAOO,MAAM,sCAAD,OAC4BP,EAD5B,qEAEVQ,MAAK,SAAAC,GACL,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,wBACjC,GACF,CDEKC,CAAgBf,GAAIQ,MAAK,SAAAQ,GACvBb,EAAgBa,EAAQC,MACxBZ,GAAc,EACf,GAEJ,GAAE,CAACD,EAAYJ,KAGd,0BACE,wBACGE,EAAagB,KAAI,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,aAApB,OAChB,0BACGA,GACC,gBACEC,IAAG,0CAAqCD,GACxCE,IAAKH,EACLI,MAAO,IACPC,OAAQ,OAGV,gBAAKH,IAAKI,EAAOH,IAAKH,EAAMI,MAAO,IAAKC,OAAQ,OAGlD,uBAAIL,KACJ,uCAAeD,OEhBP,eAACQ,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC/B,EAAIgC,GAWvD,OAREhC,IAFFgC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CFGDG,GADO,OAoBzB,EACDpC,EAAKqC,WAAa,CAChBpC,GAAIqC,IAAAA,QAEN,O,mCGpCA,IAAIC,EAAuBC,EAAQ,IAEnC,SAASC,IAAkB,CAC3B,SAASC,IAA2B,CACpCA,EAAuBC,kBAAoBF,EAE3CG,EAAOC,QAAU,WACf,SAASC,EAAKC,EAAOC,EAAUC,EAAeC,EAAUC,EAAcC,GACpE,GAAIA,IAAWb,EAAf,CAIA,IAAIc,EAAM,IAAItC,MACZ,mLAKF,MADAsC,EAAIhC,KAAO,sBACLgC,CAPL,CAQF,CAED,SAASC,IACP,OAAOR,CACR,CAHDA,EAAKS,WAAaT,EAMlB,IAAIU,EAAiB,CACnBC,MAAOX,EACPY,OAAQZ,EACRa,KAAMb,EACNc,KAAMd,EACNe,OAAQf,EACRgB,OAAQhB,EACRiB,OAAQjB,EACRkB,OAAQlB,EAERmB,IAAKnB,EACLoB,QAASZ,EACTa,QAASrB,EACTsB,YAAatB,EACbuB,WAAYf,EACZgB,KAAMxB,EACNyB,SAAUjB,EACVkB,MAAOlB,EACPmB,UAAWnB,EACXoB,MAAOpB,EACPqB,MAAOrB,EAEPsB,eAAgBlC,EAChBC,kBAAmBF,GAKrB,OAFAe,EAAelB,UAAYkB,EAEpBA,CACR,C,oBC/CCZ,EAAOC,QAAUL,EAAQ,IAARA,E,8BCNnBI,EAAOC,QAFoB,8C","sources":["components/Cast.jsx","service/getMovieCredits.js","../node_modules/nanoid/index.browser.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport { getMovieCredits } from 'service/getMovieCredits';\nimport image from 'image/no_image.jpg';\n\nconst Cast = ({ id }) => {\n  const [movieCredits, setMovieCredits] = useState([]);\n  const [isResponse, setIsResponse] = useState(true);\n  useEffect(() => {\n    if (isResponse) {\n      getMovieCredits(id).then(credits => {\n        setMovieCredits(credits.cast);\n        setIsResponse(false);\n      });\n    }\n  }, [isResponse, id]);\n\n  return (\n    <div>\n      <ul>\n        {movieCredits.map(({ character, name, profile_path }) => (\n          <li key={nanoid()}>\n            {profile_path ? (\n              <img\n                src={`https://image.tmdb.org/t/p/w500/${profile_path}`}\n                alt={name}\n                width={150}\n                height={200}\n              />\n            ) : (\n              <img src={image} alt={name} width={150} height={200} />\n            )}\n\n            <p>{name}</p>\n            <p>Character: {character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nCast.propsTypes = {\n  id: PropTypes.number,\n};\nexport default Cast;\n","export const getMovieCredits = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=fc2d7a6ee96a44a9df3bfa9e129c2a94&language=en-US`\n  ).then(response => {\n    if (response.ok) {\n      return response.json();\n    }\n    return Promise.reject(new Error('Something went wrong'));\n  });\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["Cast","id","useState","movieCredits","setMovieCredits","isResponse","setIsResponse","useEffect","fetch","then","response","ok","json","Promise","reject","Error","getMovieCredits","credits","cast","map","character","name","profile_path","src","alt","width","height","image","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","propsTypes","PropTypes","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}